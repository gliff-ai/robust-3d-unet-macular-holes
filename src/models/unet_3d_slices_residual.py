import torch


class Interpolate(torch.nn.Module):
    def __init__(self, size, mode):
        super(Interpolate, self).__init__()
        self.interp = torch.nn.functional.interpolate
        self.size = size
        self.mode = mode

    def forward(self, x):
        x = self.interp(x, size=self.size, mode=self.mode, align_corners=False)
        return x

class UNet3DSlicesResidual(torch.nn.Module):
    def __init__(self):
        super(UNet3DSlicesResidual, self).__init__()
        #self.conv_down_00 = torch.nn.Conv3d(1, 32, 3, padding=(0, 1, 1)) # Fauw et al
        self.conv_down_00 = torch.nn.Conv3d(1, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_00 = torch.nn.BatchNorm3d(32)
        self.relu_down_00 = torch.nn.ReLU()
        self.conv_down_01 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_01 = torch.nn.BatchNorm3d(32)
        self.relu_down_01 = torch.nn.ReLU()
        self.conv_down_02 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_02 = torch.nn.BatchNorm3d(32)
        self.relu_down_02 = torch.nn.ReLU()
        self.interpolate_down_00 = Interpolate((9, 256, 224), 'trilinear')

        self.conv_down_10 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_10 = torch.nn.BatchNorm3d(32)
        self.relu_down_10 = torch.nn.ReLU()
        self.conv_down_11 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_11 = torch.nn.BatchNorm3d(32)
        self.relu_down_11 = torch.nn.ReLU()
        self.conv_down_12 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_12 = torch.nn.BatchNorm3d(32)
        self.relu_down_12 = torch.nn.ReLU()
        self.interpolate_down_10 = Interpolate((9, 128, 112), 'trilinear')

        self.conv_down_20 = torch.nn.Conv3d(32, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_20 = torch.nn.BatchNorm3d(64)
        self.relu_down_20 = torch.nn.ReLU()
        self.conv_down_21 = torch.nn.Conv3d(64, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_21 = torch.nn.BatchNorm3d(64)
        self.relu_down_21 = torch.nn.ReLU()
        self.conv_down_22 = torch.nn.Conv3d(64, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_22 = torch.nn.BatchNorm3d(64)
        self.relu_down_22 = torch.nn.ReLU()
        self.interpolate_down_20 = Interpolate((7, 64, 56), 'trilinear')

        self.conv_down_30 = torch.nn.Conv3d(64, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_30 = torch.nn.BatchNorm3d(128)
        self.relu_down_30 = torch.nn.ReLU()
        self.conv_down_31 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_31 = torch.nn.BatchNorm3d(128)
        self.relu_down_31 = torch.nn.ReLU()
        self.conv_down_32 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_32 = torch.nn.BatchNorm3d(128)
        self.relu_down_32 = torch.nn.ReLU()
        self.conv_down_33 = torch.nn.Conv3d(128, 128, (1, 1, 3), padding=(0, 0, 1))
        self.bn_down_33 = torch.nn.BatchNorm3d(128)
        self.relu_down_33 = torch.nn.ReLU()
        self.interpolate_down_30 = Interpolate((5, 32, 28), 'trilinear')

        self.conv_down_40 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_40 = torch.nn.BatchNorm3d(128)
        self.relu_down_40 = torch.nn.ReLU()
        self.conv_down_41 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_41 = torch.nn.BatchNorm3d(128)
        self.relu_down_41 = torch.nn.ReLU()
        self.conv_down_42 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_42 = torch.nn.BatchNorm3d(128)
        self.relu_down_42 = torch.nn.ReLU()
        self.conv_down_43 = torch.nn.Conv3d(128, 128, (1, 1, 3), padding=(0, 0, 1))
        self.bn_down_43 = torch.nn.BatchNorm3d(128)
        self.relu_down_43 = torch.nn.ReLU()
        self.interpolate_down_40 = Interpolate((3, 16, 14), 'trilinear')

        self.conv_down_50 = torch.nn.Conv3d(128, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_50 = torch.nn.BatchNorm3d(256)
        self.relu_down_50 = torch.nn.ReLU()
        self.conv_down_51 = torch.nn.Conv3d(256, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_51 = torch.nn.BatchNorm3d(256)
        self.relu_down_51 = torch.nn.ReLU()
        self.conv_down_52 = torch.nn.Conv3d(256, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_52 = torch.nn.BatchNorm3d(256)
        self.relu_down_52 = torch.nn.ReLU()
        self.conv_down_53 = torch.nn.Conv3d(256, 256, (1, 1, 3), padding=(0, 0, 1))
        self.bn_down_53 = torch.nn.BatchNorm3d(256)
        self.relu_down_53 = torch.nn.ReLU()
        self.interpolate_down_50 = Interpolate((1, 8, 7), 'trilinear')
        #self.interpolate_down_50 = Interpolate((1, 1, 1), 'trilinear')

        self.conv_down_60 = torch.nn.Conv3d(256, 4092, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_60 = torch.nn.BatchNorm3d(4092)
        self.relu_down_60 = torch.nn.ReLU()
        self.conv_down_61 = torch.nn.Conv3d(4092, 4092, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_61 = torch.nn.BatchNorm3d(4092)
        self.relu_down_61 = torch.nn.ReLU()
        self.conv_down_62 = torch.nn.Conv3d(4092, 4092, (1, 3, 3), padding=(0, 1, 1))
        self.bn_down_62 = torch.nn.BatchNorm3d(4092)
        self.relu_down_62 = torch.nn.ReLU()
        self.conv_down_63 = torch.nn.Conv3d(4092, 4092, (1, 1, 3), padding=(0, 0, 1))
        self.bn_down_63 = torch.nn.BatchNorm3d(4092)
        self.relu_down_63 = torch.nn.ReLU()
        self.interpolate_down_60 = Interpolate((1, 1, 1), 'trilinear')

        self.linear_bottom_70 = torch.nn.Linear(4092, 4092)
        self.bn_bottom_70 = torch.nn.BatchNorm3d(1)
        self.relu_bottom_70 = torch.nn.ReLU()
        self.linear_bottom_71 = torch.nn.Linear(4092, 4092)
        self.bn_bottom_71 = torch.nn.BatchNorm3d(1)
        self.relu_bottom_71 = torch.nn.ReLU()
        self.linear_bottom_72 = torch.nn.Linear(4092, 4092)
        self.bn_bottom_72 = torch.nn.BatchNorm3d(1)
        self.relu_bottom_72 = torch.nn.ReLU()
        self.linear_bottom_73 = torch.nn.Linear(4092, 4092)
        self.bn_bottom_73 = torch.nn.BatchNorm3d(1)
        self.relu_bottom_73 = torch.nn.ReLU()
        self.linear_bottom_74 = torch.nn.Linear(4092, 4092)
        self.bn_bottom_74 = torch.nn.BatchNorm3d(1)
        self.relu_bottom_74 = torch.nn.ReLU()
        self.interpolate_bottom_70 = Interpolate((1, 8, 7), 'trilinear')
        #self.interpolate_bottom_70 = Interpolate((3, 16, 14), 'trilinear')

        self.conv_up_60 = torch.nn.Conv3d(8184, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_60 = torch.nn.BatchNorm3d(256)
        self.relu_up_60 = torch.nn.ReLU()
        self.conv_up_61 = torch.nn.Conv3d(256, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_61 = torch.nn.BatchNorm3d(256)
        self.relu_up_61 = torch.nn.ReLU()
        self.conv_up_62 = torch.nn.Conv3d(256, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_62 = torch.nn.BatchNorm3d(256)
        self.relu_up_62 = torch.nn.ReLU()
        self.conv_up_63 = torch.nn.Conv3d(256, 256, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_63 = torch.nn.BatchNorm3d(256)
        self.relu_up_63 = torch.nn.ReLU()
        self.interpolate_up_60 = Interpolate((3, 16, 14), 'trilinear')

        self.conv_up_50 = torch.nn.Conv3d(512, 128, (1, 3, 3), padding=(0, 1, 1))
        #self.conv_up_50 = torch.nn.Conv3d(8184, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_50 = torch.nn.BatchNorm3d(128)
        self.relu_up_50 = torch.nn.ReLU()
        self.conv_up_51 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_51 = torch.nn.BatchNorm3d(128)
        self.relu_up_51 = torch.nn.ReLU()
        self.conv_up_52 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_52 = torch.nn.BatchNorm3d(128)
        self.relu_up_52 = torch.nn.ReLU()
        self.conv_up_53 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_53 = torch.nn.BatchNorm3d(128)
        self.relu_up_53 = torch.nn.ReLU()
        self.interpolate_up_50 = Interpolate((5, 32, 28), 'trilinear')

        self.conv_up_40 = torch.nn.Conv3d(256, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_40 = torch.nn.BatchNorm3d(128)
        self.relu_up_40 = torch.nn.ReLU()
        self.conv_up_41 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_41 = torch.nn.BatchNorm3d(128)
        self.relu_up_41 = torch.nn.ReLU()
        self.conv_up_42 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_42 = torch.nn.BatchNorm3d(128)
        self.relu_up_42 = torch.nn.ReLU()
        self.conv_up_43 = torch.nn.Conv3d(128, 128, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_43 = torch.nn.BatchNorm3d(128)
        self.relu_up_43 = torch.nn.ReLU()
        self.interpolate_up_40 = Interpolate((7, 64, 56), 'trilinear')

        self.conv_up_30 = torch.nn.Conv3d(256, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_30 = torch.nn.BatchNorm3d(64)
        self.relu_up_30 = torch.nn.ReLU()
        self.conv_up_31 = torch.nn.Conv3d(64, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_31 = torch.nn.BatchNorm3d(64)
        self.relu_up_31 = torch.nn.ReLU()
        self.conv_up_32 = torch.nn.Conv3d(64, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_32 = torch.nn.BatchNorm3d(64)
        self.relu_up_32 = torch.nn.ReLU()
        self.conv_up_33 = torch.nn.Conv3d(64, 64, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_33 = torch.nn.BatchNorm3d(64)
        self.relu_up_33 = torch.nn.ReLU()
        self.interpolate_up_30 = Interpolate((9, 128, 112), 'trilinear')

        self.conv_up_20 = torch.nn.Conv3d(128, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_20 = torch.nn.BatchNorm3d(32)
        self.relu_up_20 = torch.nn.ReLU()
        self.conv_up_21 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_21 = torch.nn.BatchNorm3d(32)
        self.relu_up_21 = torch.nn.ReLU()
        self.conv_up_22 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_22 = torch.nn.BatchNorm3d(32)
        self.relu_up_22 = torch.nn.ReLU()
        self.interpolate_up_20 = Interpolate((9, 256, 224), 'trilinear')

        self.conv_up_10 = torch.nn.Conv3d(64, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_10 = torch.nn.BatchNorm3d(32)
        self.relu_up_10 = torch.nn.ReLU()
        self.conv_up_11 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_11 = torch.nn.BatchNorm3d(32)
        self.relu_up_11 = torch.nn.ReLU()
        self.conv_up_12 = torch.nn.Conv3d(32, 32, (1, 3, 3), padding=(0, 1, 1))
        self.bn_up_12 = torch.nn.BatchNorm3d(32)
        self.relu_up_12 = torch.nn.ReLU()
        #self.interpolate_up_10 = Interpolate((9, 512, 448), 'trilinear')  # Fauw et al
        self.interpolate_up_10 = Interpolate((1, 376, 321), 'trilinear')

        self.conv_up_00 = torch.nn.Conv3d(64, 1, (1, 3, 3), stride=1, padding=(0, 1, 1))
        self.bn_up_00 = torch.nn.BatchNorm3d(1)
        self.relu_up_00 = torch.nn.ReLU()
        self.conv_up_01 = torch.nn.Conv3d(1, 1, (1, 3, 3), stride=1, padding=(0, 1, 1))
        self.bn_up_01 = torch.nn.BatchNorm3d(1)
        self.relu_up_01 = torch.nn.ReLU()
        self.conv_up_02 = torch.nn.Conv3d(1, 1, (1, 3, 3), stride=1, padding=(0, 1, 1))
        self.bn_up_02 = torch.nn.BatchNorm3d(1)

    def forward(self, x):
        layer_outputs = []
        # DOWN CONV
        x = self.relu_down_00(self.bn_down_00(self.conv_down_00(x)))
        x_res = self.relu_down_01(self.bn_down_01(self.conv_down_01(x)))
        x_res = self.relu_down_02(self.bn_down_02(self.conv_down_02(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_00(x)

        x_res = self.relu_down_10(self.bn_down_10(self.conv_down_10(x)))
        x_res = self.relu_down_11(self.bn_down_11(self.conv_down_11(x_res)))
        x_res = self.relu_down_12(self.bn_down_12(self.conv_down_12(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_10(x)

        x = self.relu_down_20(self.bn_down_20(self.conv_down_20(x)))
        x_res = self.relu_down_21(self.bn_down_21(self.conv_down_21(x)))
        x_res = self.relu_down_22(self.bn_down_22(self.conv_down_22(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_20(x)

        x = self.relu_down_30(self.bn_down_30(self.conv_down_30(x)))
        x_res = self.relu_down_31(self.bn_down_31(self.conv_down_31(x)))
        x_res = self.relu_down_32(self.bn_down_32(self.conv_down_32(x_res)))
        x_res = self.relu_down_33(self.bn_down_33(self.conv_down_33(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_30(x)

        x = self.relu_down_40(self.bn_down_40(self.conv_down_40(x)))
        x_res = self.relu_down_41(self.bn_down_41(self.conv_down_41(x)))
        x_res = self.relu_down_42(self.bn_down_42(self.conv_down_42(x_res)))
        x_res = self.relu_down_43(self.bn_down_43(self.conv_down_43(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_40(x)

        x = self.relu_down_50(self.bn_down_50(self.conv_down_50(x)))
        x_res = self.relu_down_51(self.bn_down_51(self.conv_down_51(x)))
        x_res = self.relu_down_52(self.bn_down_52(self.conv_down_52(x_res)))
        x_res = self.relu_down_53(self.bn_down_53(self.conv_down_53(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_50(x)

        x = self.relu_down_60(self.bn_down_60(self.conv_down_60(x)))
        x_res = self.relu_down_61(self.bn_down_61(self.conv_down_61(x)))
        x_res = self.relu_down_62(self.bn_down_62(self.conv_down_62(x_res)))
        x_res = self.relu_down_63(self.bn_down_63(self.conv_down_63(x_res)))
        x = x_res + x
        layer_outputs.append(x)
        x = self.interpolate_down_60(x)

        # BOTTOM
        x = x.permute(0, 4, 2, 3, 1)
        x_res = self.relu_bottom_70(self.bn_bottom_70(self.linear_bottom_70(x)))
        x_res = self.relu_bottom_71(self.bn_bottom_71(self.linear_bottom_71(x_res)))
        x_res = self.relu_bottom_72(self.bn_bottom_72(self.linear_bottom_72(x_res)))
        x_res = self.relu_bottom_73(self.bn_bottom_73(self.linear_bottom_73(x_res)))
        x_res = self.relu_bottom_74(self.bn_bottom_74(self.linear_bottom_74(x_res)))
        x = x_res + x
        x = x.permute(0, 4, 2, 3, 1)
        x = self.interpolate_bottom_70(x)

        # UP CONV
        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_60(self.bn_up_60(self.conv_up_60(x)))
        x_res = self.relu_up_61(self.bn_up_61(self.conv_up_61(x)))
        x_res = self.relu_up_62(self.bn_up_62(self.conv_up_62(x_res)))
        x_res = self.relu_up_63(self.bn_up_63(self.conv_up_63(x_res)))
        x = x_res + x
        x = self.interpolate_up_60(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_50(self.bn_up_50(self.conv_up_50(x)))
        x_res = self.relu_up_51(self.bn_up_51(self.conv_up_51(x)))
        x_res = self.relu_up_52(self.bn_up_52(self.conv_up_52(x_res)))
        x_res = self.relu_up_53(self.bn_up_53(self.conv_up_53(x_res)))
        x = x_res + x
        x = self.interpolate_up_50(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_40(self.bn_up_40(self.conv_up_40(x)))
        x_res = self.relu_up_41(self.bn_up_41(self.conv_up_41(x)))
        x_res = self.relu_up_42(self.bn_up_42(self.conv_up_42(x_res)))
        x_res = self.relu_up_43(self.bn_up_43(self.conv_up_43(x_res)))
        x = x_res + x
        x = self.interpolate_up_40(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_30(self.bn_up_30(self.conv_up_30(x)))
        x_res = self.relu_up_31(self.bn_up_31(self.conv_up_31(x)))
        x_res = self.relu_up_32(self.bn_up_32(self.conv_up_32(x_res)))
        x_res = self.relu_up_33(self.bn_up_33(self.conv_up_33(x_res)))
        x = x_res + x
        x = self.interpolate_up_30(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_20(self.bn_up_20(self.conv_up_20(x)))
        x_res = self.relu_up_21(self.bn_up_21(self.conv_up_21(x)))
        x_res = self.relu_up_22(self.bn_up_22(self.conv_up_22(x_res)))
        x = x_res + x
        x = self.interpolate_up_20(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_10(self.bn_up_10(self.conv_up_10(x)))
        x_res = self.relu_up_11(self.bn_up_11(self.conv_up_11(x)))
        x_res = self.relu_up_12(self.bn_up_12(self.conv_up_12(x_res)))
        x = x_res + x
        x = self.interpolate_up_10(x)

        layer_to_join = layer_outputs.pop()
        dx = x.size(-1) - layer_to_join.size(-1)
        dy = x.size(-2) - layer_to_join.size(-2)
        dz = x.size(-3) - layer_to_join.size(-3)
        layer_to_join = torch.nn.functional.pad(layer_to_join, (dx//2, (dx+1)//2, dy//2, (dy+1)//2, dz//2, (dz+1)//2))
        x = torch.cat((x, layer_to_join), dim=1)
        x = self.relu_up_00(self.bn_up_00(self.conv_up_00(x)))
        x_res = self.relu_up_01(self.bn_up_01(self.conv_up_01(x)))
        x_res = self.bn_up_02(self.conv_up_02(x_res))
        x = x_res + x

        #x = torch.sigmoid(x)  # Not required as using BCEWithLogitsLoss

        return x
